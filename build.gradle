/*
 * point plugin version
 */
plugins {
    id 'org.springframework.boot' version '2.3.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
}

/*
 * config moudle info
 */
subprojects {

    /*
     * add plugin
     */
    apply plugin: 'signing'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'

    version = project.findProperty('project.version') ?: '0.0.1'
    group = project.findProperty('project.group')

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    /*
     * point repositories
     */
    repositories {
        if (project.findProperty('project.version') == null) {
            maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        } else {
            mavenCentral()
        }
    }

    dependencies {

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

        implementation('org.springframework.boot:spring-boot-starter-web') {
            exclude group: 'com.fasterxml.jackson.datatype', module: 'jackson-datatype-jdk8'
        }

        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

        compileOnly 'org.projectlombok:lombok:1.18.16'
        annotationProcessor 'org.projectlombok:lombok:1.18.16'

        implementation 'org.apache.logging.log4j:log4j-api:2.14.0'

        implementation 'org.junit.jupiter:junit-jupiter'
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    }

    /*
     * publish to github packages [https://docs.github.com/en/packages/using-github-packages-with-your-projects-ecosystem/configuring-gradle-for-use-with-github-packages]
     */
    publishing {

        repositories {
            maven {
                name = 'GitHubPackages'
                def githubRepoUrl = 'https://maven.pkg.github.com/isxcode/spring-oxygen'
                url = githubRepoUrl
                credentials {
                    username = project.findProperty('gpr.user') ?: System.getenv('USERNAME')
                    password = project.findProperty('gpr.key') ?: System.getenv('TOKEN')
                }
            }
        }

        publications {
            gpr(MavenPublication) {
                from(components.java)
            }
        }
    }

    /*
     * publish to maven center [https://docs.gradle.org/current/userguide/publishing_maven.html#header]
     */
    publishing {

        repositories {
            maven {
                name = "SonatypePackages"
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = project.findProperty("sonatypeUsername") ?: System.getenv("SONATYPE_NAME")
                    password = project.findProperty("sonatypePassword") ?: System.getenv("SONATYPE_PASSWORD")
                }
            }
        }

        publications {

            mavenJava(MavenPublication) {
                from components.java

                pom {

                    name = project.getName()
                    description = 'Spring rapid development integration framework.'
                    url = 'https://github.com/isxcode/spring-oxygen'

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'ispong'
                            name = 'ispong'
                            email = 'ispong@outlook.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:git://github.com/isxcode/spring-oxygen.git'
                        developerConnection = 'scm:git:ssh://github.com/isxcode/spring-oxygen.git'
                        url = 'https://github.com/isxcode/spring-oxygen'
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        options.encoding("UTF-8")
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    /*
     * add jacoco coverage [https://docs.gradle.org/current/userguide/jacoco_plugin.html#header]
     */
    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.enabled true
            html.destination file("${buildDir}/jacocoHtml")
        }
    }

    jacoco {
        toolVersion = "0.8.5"
        reportsDir = file("$buildDir/jacocoReport")
    }
}

allprojects {

    bootJar { enabled false }

    jar { enabled true }

    bootRun { enabled false }
}